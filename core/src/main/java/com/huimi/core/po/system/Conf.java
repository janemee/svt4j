package com.huimi.core.po.system;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 系统参数配置表实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统参数配置表")@Table(name = "sys_conf")public class Conf extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_conf";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 名称     **/    @ApiModelProperty(value = "名称")    private String name;    /**     * 标识     **/    @ApiModelProperty(value = "标识")    private String nid;    /**     * 名称对应的值     **/    @ApiModelProperty(value = "名称对应的值")    private String value;    /**     * 1,系统底层配置:systemConfig;2,各种费率配置:feeConfig;3,邮件/短信配置信息:smsConfig;4,附加增值功能配置信息:additionConfig;5,第三方资金托管相关的配置:thirdConfig     **/    @ApiModelProperty(value = "1,系统底层配置:systemConfig;2,各种费率配置:feeConfig;3,邮件/短信配置信息:smsConfig;4,附加增值功能配置信息:additionConfig;5,第三方资金托管相关的配置:thirdConfig ")    private Integer type;    @Transient    private String typeFormatter;    /**     * 0,禁用:forbiden  1,启用:enable     **/    @ApiModelProperty(value = "0,禁用:forbiden  1,启用:enable")    private Integer state;    @Transient    private String stateFormatter;    /**     * 备注     **/    @ApiModelProperty(value = "备注")    private String remark;    public String getTypeFormatter() {        if (null == typeFormatter || "".equals(typeFormatter)) {            return TYPE.getValue(getType());        }        return this.typeFormatter;    }    public void setTypeFormatter(String typeFormatter) {        this.typeFormatter = typeFormatter;    }    public String getStateFormatter() {        if (null == stateFormatter || "".equals(stateFormatter)) {            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter = stateFormatter;    }    /**     * 1,系统底层配置:systemConfig<br>2,各种费率配置:feeConfig<br>3,邮件/短信配置信息:smsConfig<br>4,附加增值功能配置信息:additionConfig<br>5,第三方资金托管相关的配置:thirdConfig     **/    public enum TYPE {        /**         * 1,系统底层配置:systemConfig         **/        SYSTEM_CONFIG("系统底层配置", 1),        /**         * 2,各种费率配置:feeConfig         **/        FEE_CONFIG("各种费率配置", 2),        /**         * 3,邮件/短信配置信息:smsConfig         **/        SMS_CONFIG("邮件/短信配置信息", 3),        /**         * 4,附加增值功能配置信息:additionConfig         **/        ADDITION_CONFIG("附加增值功能配置信息", 4),        /**         * 5,第三方资金托管相关的配置:thirdConfig         **/        THIRD_CONFIG("第三方资金托管相关的配置", 5);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        TYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.code == code) {                    return type.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (TYPE type : TYPE.values()) {                    map.put(type.code, type.value);                }            }            return map;        }    }    /**     * 0,禁用:forbidden  1,启用:enable     **/    public enum STATE {        FORBIDDEN("禁用", 0),        ENABLED("启用", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATE state : STATE.values()) {                    map.put(state.code, state.value);                }            }            return map;        }    }    public Conf() {    }    public Conf(Consumer<Conf> consumer) {        consumer.accept(this);    }}