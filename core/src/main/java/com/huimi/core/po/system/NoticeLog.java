package com.huimi.core.po.system;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 交易手续费率模板实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "交易手续费率模板")@Table(name = "sys_notice_log")public class NoticeLog extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_notice_log";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 编号     **/    @ApiModelProperty(value = "编号")    private String nid;    /**     * 1,邮件:email;2,短信:sms;3,站内信:inletter;     **/    @ApiModelProperty(value = "1,邮件:email;2,短信:sms;3,站内信:inletter;")    private Integer type;    @Transient    private String typeFormatter;    /**     * 发送用户ID     **/    @ApiModelProperty(value = "发送用户ID")    private Integer senderId;    /**     * 接收用户ID     **/    @ApiModelProperty(value = "接收用户ID")    private Integer receiverId;    /**     * 接收用户类型 1普通用户; 2; 3厂家;     */    private Integer receiverType;    /**     * 0,发送失败:sendFailure;1,发送成功:sendSuccess;2,发送中:sending;3,未读:unread;4,已读:read;     **/    @ApiModelProperty(value = "0,发送失败:sendFailure;1,发送成功:sendSuccess;2,发送中:sending;3,未读:unread;4,已读:read;")    private Integer state;    @Transient    private String stateFormatter;    /**     * 标题     **/    @ApiModelProperty(value = "标题")    private String title;    /**     * 发送内容     **/    @ApiModelProperty(value = "发送内容")    private String content;    /**     * 发送结果信息     **/    @ApiModelProperty(value = "发送结果信息")    private String result;    /**     * 接收地址  类型为短信或站内信时有值     **/    @ApiModelProperty(value = "接收地址  类型为短信或站内信时有值")    private String receiveAddress;    /**     * 所属业务类型:1系统通知;2订单相关;3其他(拓展用)     **/    @ApiModelProperty(value = "所属业务类型:1系统通知;2订单相关;3其他(拓展用)")    private Integer txType;    /**     * 业务表id;比如业务类型是订单相关可能要在消息里展示订单信息,就要用到这个字段;     **/    @ApiModelProperty(value = "业务表id;比如业务类型是订单相关可能要在消息里展示订单信息,就要用到这个字段;")    private Integer txId;    public String getTypeFormatter() {        if (null == typeFormatter || "".equals(typeFormatter)) {            return TYPE.getValue(getType());        }        return this.typeFormatter;    }    public void setTypeFormatter(String typeFormatter) {        this.typeFormatter = typeFormatter;    }    public String getStateFormatter() {        if (null == stateFormatter || "".equals(stateFormatter)) {            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter = stateFormatter;    }    /**     * 1,邮件:email<br>2,短信:sms<br>3,站内信:inletter<br>     **/    public enum TYPE {        /**         * 1,邮件:email         **/        EMAIL("邮件", 1),        /**         * 2,短信:sms         **/        SMS("短信", 2),        /**         * 3,站内信:inletter         **/        INLETTER("站内信", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        TYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.code == code) {                    return type.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (TYPE type : TYPE.values()) {                    map.put(type.code, type.value);                }            }            return map;        }    }    /**     * 0,发送失败:sendFailure<br>1,发送成功:sendSuccess<br>2,发送中:sending<br>3,未读:unread<br>4,已读:read<br>     **/    public enum STATE {        /**         * 0,发送失败:sendFailure         **/        SENDFAILURE("发送失败", 0),        /**         * 1,发送成功:sendSuccess         **/        SENDSUCCESS("发送成功", 1),        /**         * 2,发送中:sending         **/        SENDING("发送中", 2),        /**         * 3,未读:unread         **/        UNREAD("未读", 3),        /**         * 4,已读:read         **/        READ("已读", 4);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATE state : STATE.values()) {                    map.put(state.code, state.value);                }            }            return map;        }    }    /**     * 0,否:no<br>1,是:yes     **/    public enum DELFLAG {        /**         * 0,否:no         **/        NO("否", 0),        /**         * 1,是:yes         **/        YES("是", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        DELFLAG(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.code == code) {                    return delflag.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.value.equals(value)) {                    return delflag.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (DELFLAG delflag : DELFLAG.values()) {                    map.put(delflag.code, delflag.value);                }            }            return map;        }    }    /**     * 所属业务类型:1系统通知;2订单相关;3其他(拓展用)     **/    public enum TxType {        /**         * 1系统通知;         **/        T1("系统通知", 1),        /**         * 2订单相关         **/        T2("订单相关", 2),        /**         * 3其他(拓展用)         **/        T3("其他(拓展用)", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        TxType(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (TxType txType : TxType.values()) {                if (txType.code == code) {                    return txType.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (TxType txType : TxType.values()) {                if (txType.value.equals(value)) {                    return txType.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (TxType txType : TxType.values()) {                    map.put(txType.code, txType.value);                }            }            return map;        }    }    /**     * 接收用户类型: 1 普通用户; 3 商家     **/    public enum ReceiverType {        /**         * 1 普通用户         **/        T1("普通用户", 1),        /**         * 3 商家         **/        T3("商家", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        ReceiverType(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (ReceiverType receiverType : ReceiverType.values()) {                if (receiverType.code == code) {                    return receiverType.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (ReceiverType receiverType : ReceiverType.values()) {                if (receiverType.value.equals(value)) {                    return receiverType.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (ReceiverType receiverType : ReceiverType.values()) {                    map.put(receiverType.code, receiverType.value);                }            }            return map;        }    }    public NoticeLog() {    }    public NoticeLog(Consumer<NoticeLog> consumer) {        consumer.accept(this);    }}