package com.huimi.core.po.cms;import com.huimi.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.HashMap;/** * banner管理实体信息<br> * * @author fengting * @date   2018-04-23 09:43:28 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "banner管理")@Table(name = "cms_banner")public class Banner extends GenericPo<Integer> {    public static final String TABLE_NAME = "cms_banner";	/**banner编号**/	@ApiModelProperty(value = "banner编号")	private String bannerNo;	/**名称**/	@ApiModelProperty(value = "名称")	private String title;	/**app路径**/	@ApiModelProperty(value = "app路径")	private String appPath;	/**pc路径**/	@ApiModelProperty(value = "pc路径")	private String pcPath;	/**状态 0,未发布:unpublished;1,已发布:published;2,已撤回:revoke**/	@ApiModelProperty(value = "状态 0,未发布:unpublished;1,已发布:published;2,已撤回:revoke")	private Integer state;	@Transient	private String stateFormatter ;	/**描述**/	@ApiModelProperty(value = "描述")	private String remark;	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	/**0,未发布:unpublished<br>1,已发布:published<br>2,已撤回:revoke**/	public enum STATE {			/**0,未发布:unpublished**/		UNPUBLISHED("未发布",0),			/**1,已发布:published**/		PUBLISHED("已发布",1),			/**2,已撤回:revoke**/		REVOKE("已撤回",2);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public Banner(){}    public Banner(Consumer<Banner> consumer){    consumer.accept(this);    }}