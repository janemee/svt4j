package com.huimi.core.po.system;import com.alibaba.fastjson.annotation.JSONField;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 日志模板表实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "日志模板表")@Table(name = "sys_log_template")public class LogTemplate extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_log_template";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 1,资金日志:accountlog;2,会员日志:memberLog     **/    @ApiModelProperty(value = "1,资金日志:accountlog;2,会员日志:memberLog")    private Integer type;    @Transient    private String typeFormatter;    /**     * 模板信息     **/    @ApiModelProperty(value = "模板信息")    private String value;    /**     * 名称     **/    @ApiModelProperty(value = "名称")    private String name;    /**     * 模板备注     **/    @ApiModelProperty(value = "模板备注")    private String remark;    /**     * 模板标识     **/    @ApiModelProperty(value = "模板标识")    private String nid;    /**     * 0,不变:unchanged;1,收入:income;2,支出:expend;3,充值:recharge;4,提现:mention     **/    @ApiModelProperty(value = "0,不变:unchanged;1,收入:income;2,支出:expend;3,充值:recharge;4,提现:mention")    private Integer payType;    @Transient    private String payTypeFormatter;    /**     * 更新时间     **/    @ApiModelProperty(value = "更新时间")    @JSONField(format = "yyyy-MM-dd HH:mm:ss")    private Date createTime;    /**     * 更新时间     **/    @ApiModelProperty(value = "更新时间")    @JSONField(format = "yyyy-MM-dd HH:mm:ss")    private Date updateTime;    /**     * 0,否:no;1,是:yes     **/    @ApiModelProperty(value = "0,否:no;1,是:yes")    private Integer delFlag;    @Transient    private String delFlagFormatter;    public String getTypeFormatter() {        if (null == typeFormatter || "".equals(typeFormatter)) {            return TYPE.getValue(getType());        }        return this.typeFormatter;    }    public void setTypeFormatter(String typeFormatter) {        this.typeFormatter = typeFormatter;    }    public String getPayTypeFormatter() {        if (null == payTypeFormatter || "".equals(payTypeFormatter)) {            return PAYTYPE.getValue(getPayType());        }        return this.payTypeFormatter;    }    public void setPayTypeFormatter(String payTypeFormatter) {        this.payTypeFormatter = payTypeFormatter;    }    public String getDelFlagFormatter() {        if (null == delFlagFormatter || "".equals(delFlagFormatter)) {            return DELFLAG.getValue(getDelFlag());        }        return this.delFlagFormatter;    }    public void setDelFlagFormatter(String delFlagFormatter) {        this.delFlagFormatter = delFlagFormatter;    }    /**     * 1,资金日志:accountlog<br>2,会员日志:memberLog     **/    public enum TYPE {        /**         * 1,资金日志:accountlog         **/        ACCOUNTLOG("资金日志", 1),        /**         * 2,会员日志:memberLog         **/        MEMBERLOG("会员日志", 2);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private TYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.code == code) {                    return type.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (TYPE type : TYPE.values()) {                    map.put(type.code, type.value);                }            }            return map;        }    }    /**     * 0,不变:unchanged<br>1,收入:income<br>2,支出:expend<br>3,充值:recharge<br>4,提现:mention     **/    public enum PAYTYPE {        /**         * 0,不变:unchanged         **/        UNCHANGED("不变", 0),        /**         * 1,收入:income         **/        INCOME("收入", 1),        /**         * 2,支出:expend         **/        EXPEND("支出", 2),        /**         * 3,充值:recharge         **/        RECHARGE("充值", 3),        /**         * 4,提现:mention         **/        MENTION("提现", 4);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private PAYTYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (PAYTYPE paytype : PAYTYPE.values()) {                if (paytype.code == code) {                    return paytype.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (PAYTYPE paytype : PAYTYPE.values()) {                if (paytype.value.equals(value)) {                    return paytype.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (PAYTYPE paytype : PAYTYPE.values()) {                    map.put(paytype.code, paytype.value);                }            }            return map;        }    }    /**     * 0,否:no<br>1,是:yes     **/    public enum DELFLAG {        /**         * 0,否:no         **/        NO("否", 0),        /**         * 1,是:yes         **/        YES("是", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private DELFLAG(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.code == code) {                    return delflag.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.value.equals(value)) {                    return delflag.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (DELFLAG delflag : DELFLAG.values()) {                    map.put(delflag.code, delflag.value);                }            }            return map;        }    }    public LogTemplate() {    }    public LogTemplate(Consumer<LogTemplate> consumer) {        consumer.accept(this);    }}