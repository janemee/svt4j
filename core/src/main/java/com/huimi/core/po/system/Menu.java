package com.huimi.core.po.system;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 交易手续费率模板实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "交易手续费率模板")@Table(name = "sys_menu")public class Menu extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_menu";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 父级菜单ID     **/    @ApiModelProperty(value = "父级菜单ID")    private Integer parentId;    /**     * 父级菜单名称     **/    @ApiModelProperty(value = "父级菜单名称")    private String parentName;    /**     * 菜单名称     **/    @ApiModelProperty(value = "菜单名称")    private String name;    /**     * 访问URL     **/    @ApiModelProperty(value = "访问URL")    private String url;    /**     * 0,菜单:menu;1,操作:opt     **/    @ApiModelProperty(value = "0,菜单:menu;1,操作:opt")    private Integer type;    @Transient    private String typeFormatter;    /**     * 0,顶级菜单:topMenu;1,1级菜单:firstMenu;2,二级菜单:secondMenu;3,三级菜单:thirdMenu     **/    @ApiModelProperty(value = "0,顶级菜单:topMenu;1,1级菜单:firstMenu;2,二级菜单:secondMenu;3,三级菜单:thirdMenu")    private Integer level;    @Transient    private String levelFormatter;    /**     * 图标     **/    @ApiModelProperty(value = "图标")    private String images;    /**     * 排序号     **/    @ApiModelProperty(value = "排序号")    private Integer sort;    /**     * 权限值     **/    @ApiModelProperty(value = "权限值")    private Integer rightVal;    /**     * 权限位     **/    @ApiModelProperty(value = "权限位")    private Integer rightPos;    /**     * 菜单描述     **/    @ApiModelProperty(value = "菜单描述")    private String description;    /**     * 0,否:no;1,是:yes     **/    @ApiModelProperty(value = "0,否:no;1,是:yes")    private Integer isParent;    @Transient    private String isParentFormatter;    @Transient    private String isFirst;    public String getTypeFormatter() {        if (null == typeFormatter || "".equals(typeFormatter)) {            return TYPE.getValue(getType());        }        return this.typeFormatter;    }    public void setTypeFormatter(String typeFormatter) {        this.typeFormatter = typeFormatter;    }    public String getLevelFormatter() {        if (null == levelFormatter || "".equals(levelFormatter)) {            return LEVEL.getValue(getLevel());        }        return this.levelFormatter;    }    public void setLevelFormatter(String levelFormatter) {        this.levelFormatter = levelFormatter;    }    public String getIsParentFormatter() {        if (null == isParentFormatter || "".equals(isParentFormatter)) {            return ISPARENT.getValue(getIsParent());        }        return this.isParentFormatter;    }    public void setIsParentFormatter(String isParentFormatter) {        this.isParentFormatter = isParentFormatter;    }    /**     * 0,菜单:menu<br>1,操作:opt     **/    public enum TYPE {        /**         * 0,菜单:menu         **/        MENU("菜单", 0),        /**         * 1,操作:opt         **/        OPT("操作", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        TYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.code == code) {                    return type.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (TYPE type : TYPE.values()) {                    map.put(type.code, type.value);                }            }            return map;        }    }    /**     * 0,顶级菜单:topMenu<br>1,1级菜单:firstMenu<br>2,二级菜单:secondMenu<br>3,三级菜单:thirdMenu     **/    public enum LEVEL {        /**         * 0,顶级菜单:topMenu         **/        TOP_MENU("顶级菜单", 0),        /**         * 1,1级菜单:firstMenu         **/        FIRST_MENU("1级菜单", 1),        /**         * 2,二级菜单:secondMenu         **/        SECOND_MENU("二级菜单", 2),        /**         * 3,三级菜单:thirdMenu         **/        THIRD_MENU("三级菜单", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        LEVEL(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (LEVEL level : LEVEL.values()) {                if (level.code == code) {                    return level.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (LEVEL level : LEVEL.values()) {                if (level.value.equals(value)) {                    return level.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (LEVEL level : LEVEL.values()) {                    map.put(level.code, level.value);                }            }            return map;        }    }    /**     * 0,否:no<br>1,是:yes     **/    public enum ISPARENT {        /**         * 0,否:no         **/        NO("否", 0),        /**         * 1,是:yes         **/        YES("是", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        ISPARENT(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (ISPARENT isparent : ISPARENT.values()) {                if (isparent.code == code) {                    return isparent.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (ISPARENT isparent : ISPARENT.values()) {                if (isparent.value.equals(value)) {                    return isparent.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (ISPARENT isparent : ISPARENT.values()) {                    map.put(isparent.code, isparent.value);                }            }            return map;        }    }    public Menu() {    }    public Menu(Consumer<Menu> consumer) {        consumer.accept(this);    }}