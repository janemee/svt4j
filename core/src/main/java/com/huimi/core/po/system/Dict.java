package com.huimi.core.po.system;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 数据字典表实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "数据字典表")@Table(name = "sys_dict")public class Dict extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_dict";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 标识     **/    @ApiModelProperty(value = "标识")    private String nid;    /**     * 名称     **/    @ApiModelProperty(value = "名称")    private String name;    /**     * 0,停用:disable;1,启用:enable     **/    @ApiModelProperty(value = "0,停用:disable;1,启用:enable ")    private Integer state;    @Transient    private String stateFormatter;    /**     * 值     **/    @ApiModelProperty(value = "值")    private String val;    /**     * 排序     **/    @ApiModelProperty(value = "排序")    private Integer sort;    /**     * 描述     **/    @ApiModelProperty(value = "描述")    private String desc;    public String getStateFormatter() {        if (null == stateFormatter || "".equals(stateFormatter)) {            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter = stateFormatter;    }    /**     * 0,停用:disable<br>1,启用:enable     **/    public enum STATE {        /**         * 0,停用:disable         **/        DISABLE("停用", 0),        /**         * 1,启用:enable         **/        ENABLE("启用", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATE state : STATE.values()) {                    map.put(state.code, state.value);                }            }            return map;        }    }    public Dict() {    }    public Dict(Consumer<Dict> consumer) {        consumer.accept(this);    }}