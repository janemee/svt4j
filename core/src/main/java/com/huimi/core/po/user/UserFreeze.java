package com.huimi.core.po.user;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 冻结功能表实体信息<br> * * @author lzj * @date   2018-04-14 10:30:07 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "冻结功能表")@Table(name = "user_freeze")public class UserFreeze extends GenericPo<Integer> {    public static final String TABLE_NAME = "user_freeze";		/**用户id**/	@ApiModelProperty(value = "用户id")	private Integer userId;	/**0,冻结:frozen;1,正常:unblocked**/	@ApiModelProperty(value = "0,冻结:frozen;1,正常:unblocked")	private Integer loginState;	@Transient	private String loginStateFormatter ;	/**0,冻结:frozen;1,正常:unblocked**/	@ApiModelProperty(value = "0,冻结:frozen;1,正常:unblocked")	private Integer tradeState;	@Transient	private String tradeStateFormatter ;	/**0,冻结:frozen;1,正常:unblocked**/	@ApiModelProperty(value = "0,冻结:frozen;1,正常:unblocked")	private Integer mentionCoinState;	@Transient	private String mentionCoinStateFormatter ;	/**0,冻结:frozen;1,正常:unblocked**/	@ApiModelProperty(value = "0,冻结:frozen;1,正常:unblocked")	private Integer rechargeCoinState;	@Transient	private String rechargeCoinStateFormatter ;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	public String getLoginStateFormatter() {	    if(null == loginStateFormatter || "".equals(loginStateFormatter)){		    return LOGINSTATE.getValue(getLoginState());		}	    return this.loginStateFormatter;	}	public void setLoginStateFormatter(String loginStateFormatter) {	    this.loginStateFormatter=loginStateFormatter;	}	public String getTradeStateFormatter() {	    if(null == tradeStateFormatter || "".equals(tradeStateFormatter)){		    return TRADESTATE.getValue(getTradeState());		}	    return this.tradeStateFormatter;	}	public void setTradeStateFormatter(String tradeStateFormatter) {	    this.tradeStateFormatter=tradeStateFormatter;	}	public String getMentionCoinStateFormatter() {	    if(null == mentionCoinStateFormatter || "".equals(mentionCoinStateFormatter)){		    return MENTIONCOINSTATE.getValue(getMentionCoinState());		}	    return this.mentionCoinStateFormatter;	}	public void setMentionCoinStateFormatter(String mentionCoinStateFormatter) {	    this.mentionCoinStateFormatter=mentionCoinStateFormatter;	}	public String getRechargeCoinStateFormatter() {	    if(null == rechargeCoinStateFormatter || "".equals(rechargeCoinStateFormatter)){		    return RECHARGECOINSTATE.getValue(getRechargeCoinState());		}	    return this.rechargeCoinStateFormatter;	}	public void setRechargeCoinStateFormatter(String rechargeCoinStateFormatter) {	    this.rechargeCoinStateFormatter=rechargeCoinStateFormatter;	}	/**0,冻结:frozen<br>1,正常:unblocked**/	public enum LOGINSTATE {			/**0,冻结:frozen**/		FROZEN("冻结",0),			/**1,正常:unblocked**/		UNBLOCKED("正常",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private LOGINSTATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (LOGINSTATE loginstate : LOGINSTATE.values()) {				if (loginstate.code == code) { 					return loginstate.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (LOGINSTATE loginstate : LOGINSTATE.values()) {				if (loginstate.value.equals(value)) { 					return loginstate.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (LOGINSTATE loginstate : LOGINSTATE.values()) {					map.put(loginstate.code,loginstate.value);				}			}			return map;		}	}		/**0,冻结:frozen<br>1,正常:unblocked**/	public enum TRADESTATE {			/**0,冻结:frozen**/		FROZEN("冻结",0),			/**1,正常:unblocked**/		UNBLOCKED("正常",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private TRADESTATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TRADESTATE tradestate : TRADESTATE.values()) {				if (tradestate.code == code) { 					return tradestate.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (TRADESTATE tradestate : TRADESTATE.values()) {				if (tradestate.value.equals(value)) { 					return tradestate.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (TRADESTATE tradestate : TRADESTATE.values()) {					map.put(tradestate.code,tradestate.value);				}			}			return map;		}	}		/**0,冻结:frozen<br>1,正常:unblocked**/	public enum MENTIONCOINSTATE {			/**0,冻结:frozen**/		FROZEN("冻结",0),			/**1,正常:unblocked**/		UNBLOCKED("正常",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private MENTIONCOINSTATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (MENTIONCOINSTATE mentioncoinstate : MENTIONCOINSTATE.values()) {				if (mentioncoinstate.code == code) { 					return mentioncoinstate.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (MENTIONCOINSTATE mentioncoinstate : MENTIONCOINSTATE.values()) {				if (mentioncoinstate.value.equals(value)) { 					return mentioncoinstate.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (MENTIONCOINSTATE mentioncoinstate : MENTIONCOINSTATE.values()) {					map.put(mentioncoinstate.code,mentioncoinstate.value);				}			}			return map;		}	}		/**0,冻结:frozen<br>1,正常:unblocked**/	public enum RECHARGECOINSTATE {			/**0,冻结:frozen**/		FROZEN("冻结",0),			/**1,正常:unblocked**/		UNBLOCKED("正常",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private RECHARGECOINSTATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (RECHARGECOINSTATE rechargecoinstate : RECHARGECOINSTATE.values()) {				if (rechargecoinstate.code == code) { 					return rechargecoinstate.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (RECHARGECOINSTATE rechargecoinstate : RECHARGECOINSTATE.values()) {				if (rechargecoinstate.value.equals(value)) { 					return rechargecoinstate.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (RECHARGECOINSTATE rechargecoinstate : RECHARGECOINSTATE.values()) {					map.put(rechargecoinstate.code,rechargecoinstate.value);				}			}			return map;		}	}	    public UserFreeze(){}    public UserFreeze(Consumer<UserFreeze> consumer){    consumer.accept(this);    }}