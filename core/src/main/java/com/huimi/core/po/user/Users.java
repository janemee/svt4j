package com.huimi.core.po.user;import com.fasterxml.jackson.annotation.JsonFormat;import com.huimi.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 用户实体信息<br> * * @author fengting * @date   2018-04-12 03:56:01 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "用户")@Table(name = "users")public class Users extends GenericPo<Integer> {    public static final String TABLE_NAME = "users";		/**1,普通用户:general;2,基金经理:amaldar**/	@ApiModelProperty(value = "1,普通用户:general;2,基金经理:amaldar")	private Integer type;	/**1,普通用户:general;2,商户:business**/	@ApiModelProperty(value = "1,普通用户:general;2,商户:business")	private Integer rank;	@Transient	private String rankFormatter ;	@Transient	private String typeFormatter ;	/**登录密码**/	@ApiModelProperty(value = "登录密码")	private String pwd;	/**登录密码盐**/	@ApiModelProperty(value = "登录密码盐")	private String pwdSalt;	/**提币密码**/	@ApiModelProperty(value = "提币密码")	private String mentionPwd;	/**提币密码盐**/	@ApiModelProperty(value = "提币密码盐")	private String mentionPwdSalt;	/**邮箱**/	@ApiModelProperty(value = "邮箱")	private String email;	/**真实姓名**/	@ApiModelProperty(value = "真实姓名")	private String realname;	/**手机号**/	@ApiModelProperty(value = "手机号")	private String mobile;	/**证件号码**/	@ApiModelProperty(value = "证件号码")	private String idNo;	/**1,身份证:idcard;2,护照:passport**/	@ApiModelProperty(value = "1,身份证:idcard;2,护照:passport")	private Integer idType;	@Transient	private String idTypeFormatter ;	/**国家地区(目前只有1境内/2境外)两种**/	@ApiModelProperty(value = "国家地区(目前只有1境内/2境外)两种")	private Integer country;	@Transient	private String countryFormatter ;	/**用户来源(注册来源 1pc  2安卓 3ios)**/	@ApiModelProperty(value = "用户来源(注册来源 1pc  2安卓 3ios)")	private String source;	/**注销备注**/	@ApiModelProperty(value = "注销备注")	private String remark;	/**谷歌验证器状态 0,关闭:close;1,开启:open**/	@ApiModelProperty(value = "谷歌验证器状态 0,关闭:close;1,开启:open")	private Integer googleState;	@Transient	private String googleStateFormatter ;	/**google私钥**/	@ApiModelProperty(value = "google私钥")	private String googleKey;	/**最后登录时间**/	@ApiModelProperty(value = "最后登录时间")	@JSONField(format="yyyy-MM-dd HH:mm:ss")	@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	private Date lastLoginDate;	/**1,正常:normal;2,登录冻结:freeze;3,注销:logout;4,注册未完成:regist_unfinished;5,未支付:unpaid**/	@ApiModelProperty(value = "1,正常:normal;2,登录冻结:freeze;3,注销:logout;4,注册未完成:regist_unfinished;5,未支付:unpaid")	private Integer state;	@Transient	private String stateFormatter ;	/**密码输入错误次数**/	@ApiModelProperty(value = "密码输入错误次数")	private Integer errCount;	public String getTypeFormatter() {	    if(null == typeFormatter || "".equals(typeFormatter)){		    return TYPE.getValue(getType());		}	    return this.typeFormatter;	}	public void setTypeFormatter(String typeFormatter) {	    this.typeFormatter=typeFormatter;	}	public String getIdTypeFormatter() {	    if(null == idTypeFormatter || "".equals(idTypeFormatter)){		    return IDTYPE.getValue(getIdType());		}	    return this.idTypeFormatter;	}	public void setIdTypeFormatter(String idTypeFormatter) {	    this.idTypeFormatter=idTypeFormatter;	}	public String getCountryFormatter() {		if(null == countryFormatter || "".equals(countryFormatter)){			return COUNTRY.getValue(getCountry());		}		return this.countryFormatter;	}	public void setCountryFormatter(String countryFormatter) {		this.countryFormatter=countryFormatter;	}	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	public String getGoogleStateFormatter() {		if(null == googleStateFormatter || "".equals(googleStateFormatter)){			return GOOGLESTATE.getValue(getGoogleState());		}		return this.googleStateFormatter;	}	public void setGoogleStateFormatter(String googleStateFormatter) {		this.googleStateFormatter=stateFormatter;	}	public void setRankFormatter(String rankFormatter) {		this.rankFormatter=rankFormatter;	}	/**1,普通用户:general<br>2,商户:business**/	public enum RANK {		NO("无等级",0),		/**1,普通用户:general**/		GENERAL("普通用户",1),		/**2,商户:business**/		BUSINESS("商户",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private RANK(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (Users.RANK rank : Users.RANK.values()) {				if (rank.code == code) {					return rank.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (Users.RANK rank : Users.RANK.values()) {				if (rank.value.equals(value)) {					return rank.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (Users.RANK rank : Users.RANK.values()) {					map.put(rank.code,rank.value);				}			}			return map;		}	}	/**1,普通用户:general<br>2,基金经理:amaldar**/	public enum TYPE {			/**1,普通用户:general**/		GENERAL("普通用户",1),			/**2,基金经理:amaldar**/		AMALDAR("基金经理",2);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private TYPE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.code == code) { 					return type.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (TYPE type : TYPE.values()) {				if (type.value.equals(value)) { 					return type.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (TYPE type : TYPE.values()) {					map.put(type.code,type.value);				}			}			return map;		}	}	/**1,境内:domestic<br>2,境外:abroad**/	public enum COUNTRY {		NO("暂无",0),		/**1,境内:domestic**/		DOMESTIC("境内",1),		/**2,境外:abroad**/		ABROAD("境外",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private COUNTRY(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (COUNTRY country : COUNTRY.values()) {				if (country.code == code) {					return country.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (COUNTRY country : COUNTRY.values()) {				if (country.value.equals(value)) {					return country.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (COUNTRY country : COUNTRY.values()) {					map.put(country.code,country.value);				}			}			return map;		}	}	/**1,身份证:idcard<br>2,护照:passport**/	public enum IDTYPE {		NO("暂无",0),		/**1,身份证:idcard**/		IDCARD("身份证",1),		/**2,护照:passport**/		PASSPORT("护照",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private IDTYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (IDTYPE idtype : IDTYPE.values()) {				if (idtype.code == code) {					return idtype.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (IDTYPE idtype : IDTYPE.values()) {				if (idtype.value.equals(value)) {					return idtype.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (IDTYPE idtype : IDTYPE.values()) {					map.put(idtype.code,idtype.value);				}			}			return map;		}	}	/**0,关闭:close;1,开启:open**/	public enum GOOGLESTATE {		/**0,关闭:close**/		close("关闭",0),		/**1,开启:open**/		open("开启",1);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private GOOGLESTATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (GOOGLESTATE googlestate : GOOGLESTATE.values()) {				if (googlestate.code == code) {					return googlestate.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (GOOGLESTATE googlestate : GOOGLESTATE.values()) {				if (googlestate.value.equals(value)) {					return googlestate.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (GOOGLESTATE googlestate : GOOGLESTATE.values()) {					map.put(googlestate.code,googlestate.value);				}			}			return map;		}	}	/**1,正常:normal<br>2,登录冻结:freeze<br>3,注销:logout;4,注册未完成:regist_unfinished;5,未支付:unpaid**/	public enum STATE {		/**1,正常:normal**/		NORMAL("正常",1),		/**2,登录冻结:freeze**/		FREEZE("登录冻结",2),		/**3,注销:logout**/		LOGOUT("注销",3),		/**4,注册未完成:REGIST_UNFINISHED**/		REGIST_UNFINISHED("注册未完成",4),		/**5,未支付:unpaid**/		UNPAID("未支付",5);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private STATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public Users(){}    public Users(Consumer<Users> consumer){    consumer.accept(this);    }}