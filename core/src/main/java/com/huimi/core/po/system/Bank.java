package com.huimi.core.po.system;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 银行信息管理表实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "银行信息管理表")@Table(name = "sys_bank")public class Bank extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_bank";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 排序     **/    @ApiModelProperty(value = "排序")    private Integer sort;    /**     * 银行名称     **/    @ApiModelProperty(value = "银行名称")    private String name;    /**     * 内部编码-唯一的不会变的。     **/    @ApiModelProperty(value = "内部编码-唯一的不会变的。")    private String code;    /**     * 0,显示:display;1,隐藏:hide     **/    @ApiModelProperty(value = "0,显示:display;1,隐藏:hide")    private Integer state;    @Transient    private String stateFormatter;    /**     * 图标保存地址     **/    @ApiModelProperty(value = "图标保存地址")    private String icon;    public String getStateFormatter() {        if (null == stateFormatter || "".equals(stateFormatter)) {            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter = stateFormatter;    }    /**     * 0,显示:display<br>1,隐藏:hide     **/    public enum STATE {        /**         * 0,显示:display         **/        DISPLAY("显示", 0),        /**         * 1,隐藏:hide         **/        HIDE("隐藏", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATE state : STATE.values()) {                    map.put(state.code, state.value);                }            }            return map;        }    }    public Bank() {    }    public Bank(Consumer<Bank> consumer) {        consumer.accept(this);    }}