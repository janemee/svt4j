package com.huimi.core.po.tpl;import com.huimi.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.HashMap;/** * 各种协议模板实体信息<br> * * @author fengting * @date   2018-04-23 09:50:40 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "各种协议模板")@Table(name = "tpl_protocol")public class Protocol extends GenericPo<Integer> {    public static final String TABLE_NAME = "tpl_protocol";		/**模板编号**/	@ApiModelProperty(value = "模板编号")	private String tplNo;	/**模板名称(中文)**/	@ApiModelProperty(value = "模板名称(中文)")	private String tplCnName;	/**模板名称(英文)**/	@ApiModelProperty(value = "模板名称(英文)")	private String tplEnName;	/**中文协议**/	@ApiModelProperty(value = "中文协议")	private String cnContent;	/**英文协议**/	@ApiModelProperty(value = "英文协议")	private String enContent;	/**状态 1,启用:enable;0,停用:disable**/	@ApiModelProperty(value = "状态 1,启用:enable;0,停用:disable")	private Integer state;	@Transient	private String stateFormatter ;	/**是否默认 0,否:no;1,是:yes**/	@ApiModelProperty(value = "是否默认 0,否:no;1,是:yes")	private Integer isDefault;	@Transient	private String isDefaultFormatter ;	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	public String getIsDefaultFormatter() {	    if(null == isDefaultFormatter || "".equals(isDefaultFormatter)){		    return ISDEFAULT.getValue(getIsDefault());		}	    return this.isDefaultFormatter;	}	public void setIsDefaultFormatter(String isDefaultFormatter) {	    this.isDefaultFormatter=isDefaultFormatter;	}	/**1,启用:enable<br>0,停用:disable**/	public enum STATE {			/**1,启用:enable**/		ENABLE("启用",1),			/**0,停用:disable**/		DISABLE("停用",0);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}		/**0,否:no<br>1,是:yes**/	public enum ISDEFAULT {			/**0,否:no**/		NO("否",0),			/**1,是:yes**/		YES("是",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private ISDEFAULT(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (ISDEFAULT isdefault : ISDEFAULT.values()) {				if (isdefault.code == code) { 					return isdefault.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (ISDEFAULT isdefault : ISDEFAULT.values()) {				if (isdefault.value.equals(value)) { 					return isdefault.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (ISDEFAULT isdefault : ISDEFAULT.values()) {					map.put(isdefault.code,isdefault.value);				}			}			return map;		}	}	    public Protocol(){}    public Protocol(Consumer<Protocol> consumer){    consumer.accept(this);    }}