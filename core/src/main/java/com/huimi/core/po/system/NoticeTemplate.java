package com.huimi.core.po.system;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 系统通知模板表实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统通知模板表")@Table(name = "sys_notice_template")public class NoticeTemplate extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_notice_template";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 编码，与notice_type组合起来唯一     **/    @ApiModelProperty(value = "编码，与notice_type组合起来唯一")    private String nid;    /**     * 1,邮件:email;2,短信:sms;3,站内信:message;     **/    @ApiModelProperty(value = "1,邮件:email;2,短信:sms;3,站内信:message;")    private Integer noticeType;    @Transient    private String noticeTypeFormatter;    /**     * 1,系统通知:systemNotice;2,用户通知:userNotice;     **/    @ApiModelProperty(value = "1,系统通知:systemNotice;2,用户通知:userNotice;")    private Integer type;    @Transient    private String typeFormatter;    /**     * 标题的freemarker模板     **/    @ApiModelProperty(value = "标题的freemarker模板")    private String title;    /**     * 内容的freemarker模板     **/    @ApiModelProperty(value = "内容的freemarker模板")    private String template;    /**     * remark的freemarker模板     **/    @ApiModelProperty(value = "remark的freemarker模板")    private String templateRemark;    /**     * 0,禁用:forbiden;1,启用:enable     **/    @ApiModelProperty(value = "0,禁用:forbiden;1,启用:enable")    private Integer state;    @Transient    private String stateFormatter;    /**     * 备注     **/    @ApiModelProperty(value = "备注")    private String remark;    /**     * 0,否:no;1,是:yes     **/    @ApiModelProperty(value = "0,否:no;1,是:yes")    private Integer delFlag;    @Transient    private String delFlagFormatter;    public String getNoticetypeFormatter() {        if (null == noticeTypeFormatter || "".equals(noticeTypeFormatter)) {            return NOTICETYPE.getValue(getNoticeType());        }        return this.noticeTypeFormatter;    }    public void setNoticetypeFormatter(String noticetypeFormatter) {        this.noticeTypeFormatter = noticetypeFormatter;    }    public String getTypeFormatter() {        if (null == typeFormatter || "".equals(typeFormatter)) {            return TYPE.getValue(getType());        }        return this.typeFormatter;    }    public void setTypeFormatter(String typeFormatter) {        this.typeFormatter = typeFormatter;    }    public String getStateFormatter() {        if (null == stateFormatter || "".equals(stateFormatter)) {            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter = stateFormatter;    }    public String getDelFlagFormatter() {        if (null == delFlagFormatter || "".equals(delFlagFormatter)) {            return DELFLAG.getValue(getDelFlag());        }        return this.delFlagFormatter;    }    public void setDelFlagFormatter(String delFlagFormatter) {        this.delFlagFormatter = delFlagFormatter;    }    /**     * 1,邮件:email<br>2,短信:sms<br>3,站内信:message<br>     **/    public enum NOTICETYPE {        /**         * 1,邮件:email         **/        EMAIL("邮件", 1),        /**         * 2,短信:sms         **/        SMS("短信", 2),        /**         * 3,站内信:message         **/        MESSAGE("站内信", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        NOTICETYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (NOTICETYPE noticetype : NOTICETYPE.values()) {                if (noticetype.code == code) {                    return noticetype.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (NOTICETYPE noticetype : NOTICETYPE.values()) {                if (noticetype.value.equals(value)) {                    return noticetype.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (NOTICETYPE noticetype : NOTICETYPE.values()) {                    map.put(noticetype.code, noticetype.value);                }            }            return map;        }    }    /**     * 1,系统通知:systemNotice<br>2,用户通知:userNotice<br>     **/    public enum TYPE {        /**         * 1,系统通知:systemNotice         **/        SYSTEMNOTICE("系统通知", 1),        /**         * 2,用户通知:userNotice         **/        USERNOTICE("用户通知", 2);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        TYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.code == code) {                    return type.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (TYPE type : TYPE.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (TYPE type : TYPE.values()) {                    map.put(type.code, type.value);                }            }            return map;        }    }    /**     * 0,禁用:forbidden<br>1,启用:enable     **/    public enum STATE {        /**         * 0,禁用:forbiden         **/        FORBIDDEN("禁用", 0),        /**         * 1,启用:enable         **/        ENABLE("启用", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATE state : STATE.values()) {                    map.put(state.code, state.value);                }            }            return map;        }    }    /**     * 0,否:no<br>1,是:yes     **/    public enum DELFLAG {        /**         * 0,否:no         **/        NO("否", 0),        /**         * 1,是:yes         **/        YES("是", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        DELFLAG(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.code == code) {                    return delflag.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.value.equals(value)) {                    return delflag.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (DELFLAG delflag : DELFLAG.values()) {                    map.put(delflag.code, delflag.value);                }            }            return map;        }    }    public NoticeTemplate() {    }    public NoticeTemplate(Consumer<NoticeTemplate> consumer) {        consumer.accept(this);    }}