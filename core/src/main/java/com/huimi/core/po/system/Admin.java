package com.huimi.core.po.system;import com.alibaba.fastjson.annotation.JSONField;import com.fasterxml.jackson.annotation.JsonValue;import com.huimi.common.baseMapper.GenericPo;import com.huimi.common.mybatis.BaseEnum;import com.huimi.core.constant.HMTypeColro;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 系统管理员表实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统管理员表")@Table(name = "sys_admin")public class Admin extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_admin";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 用户名(用于登录使用，一般使用简称)     **/    @ApiModelProperty(value = "用户名(用于登录使用，一般使用简称)")    private String username;    /**     * 全称，一般填写公司名称     **/    @ApiModelProperty(value = "全称，一般填写公司名称")    private String fullname;    @ApiModelProperty(value = "头像url")    private String avatarUrl;    /**     * 1,男:male;2,女:female;3,保密:secret     **/    @ApiModelProperty(value = "1,男:male;2,女:female;3,保密:secret")    private Integer sex;    @Transient    private String sexFormatter;    /**     * 密码     **/    @ApiModelProperty(value = "密码")    private String pwd;    /**     * 密钥     **/    @ApiModelProperty(value = "密钥")    private String salt;    /**     * 0,停用:disable;1,启用:enable     **/    @ApiModelProperty(value = "0,停用:disable;1,启用:enable")    private Integer state;    @Transient    private String stateFormatter;    /**     * 角色ID集合     **/    @ApiModelProperty(value = "角色ID集合")    private String roleIds;    private Integer type;    /**     * 对应前台的用户ID     **/    @ApiModelProperty(value = "对应前台的用户ID")    private Integer userId;    /**     * 对应前台的用户ID     **/    @ApiModelProperty(value = "商家ID")    private Integer shopId;    /**     * 对应用户的最大设备数量     **/    @ApiModelProperty(value = "对应用户的最大设备数量")    private Integer ports;    private Integer agentId;    /**     * 父级ID     **/    @ApiModelProperty(value = "父级ID")    private Integer parentId;    /**     * 登陆时间     **/    @ApiModelProperty(value = "登陆时间")    @JSONField(format = "yyyy-MM-dd HH:mm:ss")    private Date loginTime;    /**     * 排序号     **/    @ApiModelProperty(value = "排序号")    private Integer sort;    /**     * 密码连续错误次数     **/    @ApiModelProperty(value = "密码连续错误次数")    private Integer errCount;    /**     * 停用时间     **/    @ApiModelProperty(value = "停用时间")    @JSONField(format = "yyyy-MM-dd HH:mm:ss")    private Date stopDate;    /**     * 手机号码     **/    @ApiModelProperty(value = "手机号码")    private String mobile;    /**     * 总操作权限的json串     **/    @ApiModelProperty(value = "总操作权限的json串")    private String rightJson;    /**     * 邀请码     **/    @ApiModelProperty(value = "邀请码")    private String code;    /**     * 角色名称     */    @Transient    private String roleName;    @Transient    private String delFlagFormatter;    public String getSexFormatter() {        if (null == sexFormatter || "".equals(sexFormatter)) {            return SEX.getValue(getSex());        }        return this.sexFormatter;    }    public void setSexFormatter(String sexFormatter) {        this.sexFormatter = sexFormatter;    }    public String getStateFormatter() {        if (null == stateFormatter || "".equals(stateFormatter)) {            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter = stateFormatter;    }    /**     * 1,男:male<br>2,女:female<br>3,保密:secret     **/    public enum SEX {        /**         * 1,男:male         **/        MALE("男", 1),        /**         * 2,女:female         **/        FEMALE("女", 2),        /**         * 3,保密:secret         **/        SECRET("保密", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        private SEX(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (SEX sex : SEX.values()) {                if (sex.code == code) {                    return sex.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (SEX sex : SEX.values()) {                if (sex.value.equals(value)) {                    return sex.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (SEX sex : SEX.values()) {                    map.put(sex.code, sex.value);                }            }            return map;        }    }    /**     * 0,停用:disable<br>1,启用:enable     **/    public enum STATE {        /**         * 0,停用:disable         **/        DISABLE("停用", 0),        /**         * 1,启用:enable         **/        ENABLE("启用", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATE state : STATE.values()) {                    map.put(state.code, state.value);                }            }            return map;        }    }    /**     * 0,否:no<br>1,是:yes     **/    public enum DELFLAG {        /**         * 0,否:no         **/        NO("否", 0),        /**         * 1,是:yes         **/        YES("是", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        DELFLAG(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.code == code) {                    return delflag.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.value.equals(value)) {                    return delflag.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (DELFLAG delflag : DELFLAG.values()) {                    map.put(delflag.code, delflag.value);                }            }            return map;        }    }    public enum Type {        /**         * 1 管理员         **/        T1("管理员", 1),        /**         * 2 代理商         **/        T2("代理商", 2),        /**         * 3 厂家         */        T3("厂家", 3),        ;        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        Type(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (DELFLAG delflag : DELFLAG.values()) {                if (delflag.code == code) {                    return delflag.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (Type type : Type.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (Type type : Type.values()) {                    map.put(type.code, type.value);                }            }            return map;        }    }    public Admin() {    }    public Admin(Consumer<Admin> consumer) {        consumer.accept(this);    }    /**     * 校验是否是管理员     * @param type     * @return     */    public static boolean checkedAdminRoot(int type) {        return Type.T1.code == type ? true : false;    }    /**     * 校验是否是代理商     * @param type     * @return     */    public static boolean checkedAgencyRoot(int type) {        return Type.T2.code == type ? true : false;    }    /**     * 校验是否是厂家     * @param type     * @return     */    public static boolean checkedVenderRoot(int type) {        return Type.T3.code == type ? true : false;    }}