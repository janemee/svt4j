package com.huimi.core.po.cms;import com.fasterxml.jackson.annotation.JsonFormat;import com.huimi.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 系统公告实体信息<br> * * @author fengting * @date   2018-04-23 09:43:28 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统公告")@Table(name = "cms_announcement")public class Announcement extends GenericPo<Integer> {    public static final String TABLE_NAME = "cms_announcement";	/**公告编号**/	@ApiModelProperty(value = "公告编号")	private String anNo;	/**中文标题**/	@ApiModelProperty(value = "标题-中文")	private String cnTitle;	/**英文标题**/	@ApiModelProperty(value = "标题-英文")	private String enTitle;	/**公告内容-中文**/	@ApiModelProperty(value = "公告内容-中文")	private String cnContent;	/**公告内容-英文**/	@ApiModelProperty(value = "公告内容-英文")	private String enContent;	/**状态 0,未发布:unpublished;1,已发布:published;2,已撤回:revoke**/	@ApiModelProperty(value = "状态 0,未发布:unpublished;1,已发布:published;2,已撤回:revoke")	private Integer state;	@Transient	private String stateFormatter ;	/**描述**/	@ApiModelProperty(value = "描述")	private String remark;	/**中文-发布者**/	@ApiModelProperty(value = "中文-发布者")	private String cnPublisher;	/**英文-发布者**/	@ApiModelProperty(value = "英文-发布者")	private String enPublisher;	@ApiModelProperty(value = "发布时间")	@JSONField(format = "yyyy-MM-dd HH:mm:ss")	@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	private Date publishTime;	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	/**0,未发布:unpublished<br>1,已发布:published<br>2,已撤回:revoke**/	public enum STATE {			/**0,未发布:unpublished**/		UNPUBLISHED("未发布",0),			/**1,已发布:published**/		PUBLISHED("已发布",1),			/**2,已撤回:revoke**/		REVOKE("已撤回",2);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public Announcement(){}    public Announcement(Consumer<Announcement> consumer){    consumer.accept(this);    }}