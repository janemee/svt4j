package com.huimi.core.po.system;import com.alibaba.fastjson.annotation.JSONField;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 系统访问日志实体信息<br> * * @author fengting * @date 2018-09-29 04:30:19 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统访问日志")@Table(name = "sys_system_log")public class SystemLog extends GenericPo<Integer> {    public static final String TABLE_NAME = "sys_system_log";    /**     * uuid     **/    @ApiModelProperty(value = "uuid")    private String uuid;    /**     * 0,没有权限:noRight;1,URL不存在:urlNotExists;2,未登录:noLogin;3,业务代码异常:exception     **/    @ApiModelProperty(value = "0,没有权限:noRight;1,URL不存在:urlNotExists;2,未登录:noLogin;3,业务代码异常:exception")    private Integer cause;    @Transient    private String causeFormatter;    /**     * cookie数据     **/    @ApiModelProperty(value = "cookie数据")    private String cookie;    /**     * 描述     **/    @ApiModelProperty(value = "描述")    private String desc;    /**     * 客户端ip     **/    @ApiModelProperty(value = "客户端ip")    private String ip;    /**     * 访问方法     **/    @ApiModelProperty(value = "访问方法")    private String method;    /**     * 源引用     **/    @ApiModelProperty(value = "源引用")    private String referer;    /**     * 请求路径     **/    @ApiModelProperty(value = "请求路径")    private String requestPath;    /**     * 访问开始日期     **/    @ApiModelProperty(value = "访问开始日期")    @JSONField(format = "yyyy-MM-dd HH:mm:ss")    private Date startDate;    /**     * 访问结束日期     **/    @ApiModelProperty(value = "访问结束日期")    @JSONField(format = "yyyy-MM-dd HH:mm:ss")    private Date endDate;    /**     * 访问耗时     **/    @ApiModelProperty(value = "访问耗时")    private Integer took;    /**     * 0,失败:failure;1,正常:normal;     **/    @ApiModelProperty(value = "0,失败:failure;1,正常:normal;")    private Integer status;    @Transient    private String statusFormatter;    /**     * 访问代理信息     **/    @ApiModelProperty(value = "访问代理信息")    private String userAgent;    public String getCauseFormatter() {        if (null == causeFormatter || "".equals(causeFormatter)) {            return CAUSE.getValue(getCause());        }        return this.causeFormatter;    }    public void setCauseFormatter(String causeFormatter) {        this.causeFormatter = causeFormatter;    }    public String getStatusFormatter() {        if (null == statusFormatter || "".equals(statusFormatter)) {            return STATUS.getValue(getStatus());        }        return this.statusFormatter;    }    public void setStatusFormatter(String statusFormatter) {        this.statusFormatter = statusFormatter;    }    /**     * 0,没有权限:noRight<br>1,URL不存在:urlNotExists<br>2,未登录:noLogin<br>3,业务代码异常:exception     **/    public enum CAUSE {        /**         * 0,没有权限:noRight         **/        NO_RIGHT("没有权限", 0),        /**         * 1,URL不存在:urlNotExists         **/        URL_NOT_EXISTS("URL不存在", 1),        /**         * 2,未登录:noLogin         **/        NO_LOGIN("未登录", 2),        /**         * 3,业务代码异常:exception         **/        EXCEPTION("业务代码异常", 3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        CAUSE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (CAUSE cause : CAUSE.values()) {                if (cause.code == code) {                    return cause.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (CAUSE cause : CAUSE.values()) {                if (cause.value.equals(value)) {                    return cause.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (CAUSE cause : CAUSE.values()) {                    map.put(cause.code, cause.value);                }            }            return map;        }    }    /**     * 0,失败:failure<br>1,正常:normal<br>     **/    public enum STATUS {        /**         * 0,失败:failure         **/        FAILURE("失败", 0),        /**         * 1,正常:normal         **/        NORMAL("正常", 1);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<>();        STATUS(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATUS status : STATUS.values()) {                if (status.code == code) {                    return status.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value || "".equals(value)) {                return null;            }            for (STATUS status : STATUS.values()) {                if (status.value.equals(value)) {                    return status.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if (map.size() == 0) {                for (STATUS status : STATUS.values()) {                    map.put(status.code, status.value);                }            }            return map;        }    }    public SystemLog() {    }    public SystemLog(Consumer<SystemLog> consumer) {        consumer.accept(this);    }}