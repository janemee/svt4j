package com.huimi.core.po.user;import com.huimi.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 用户站内信表实体信息<br> * * @author lzj * @date   2018-04-14 10:30:07 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "用户站内信表")@Table(name = "user_in_letter")public class UserInLetter extends GenericPo<Integer> {    public static final String TABLE_NAME = "user_in_letter";		/**接收用户ID**/	@ApiModelProperty(value = "接收用户ID")	private Integer userId;	/**0,未读:unread;1,已读:read**/	@ApiModelProperty(value = "0,未读:unread;1,已读:read")	private Integer readFlag;	@Transient	private String readFlagFormatter ;	/**标题**/	@ApiModelProperty(value = "标题")	private String title;	/**发送内容**/	@ApiModelProperty(value = "发送内容")	private String content;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	public String getReadFlagFormatter() {	    if(null == readFlagFormatter || "".equals(readFlagFormatter)){		    return READFLAG.getValue(getReadFlag());		}	    return this.readFlagFormatter;	}	public void setReadFlagFormatter(String readFlagFormatter) {	    this.readFlagFormatter=readFlagFormatter;	}	/**0,未读:unread<br>1,已读:read**/	public enum READFLAG {			/**0,未读:unread**/		UNREAD("未读",0),			/**1,是:read**/		READ("已读",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private READFLAG(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (READFLAG readflag : READFLAG.values()) {				if (readflag.code == code) { 					return readflag.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (READFLAG readflag : READFLAG.values()) {				if (readflag.value.equals(value)) { 					return readflag.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (READFLAG readflag : READFLAG.values()) {					map.put(readflag.code,readflag.value);				}			}			return map;		}	}	    public UserInLetter(){}    public UserInLetter(Consumer<UserInLetter> consumer){    consumer.accept(this);    }}